// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// a doctor have a unique medicalexp and a medicalexp has only one patient
// a patinet have a unique medicalinfo and a medicalinfo has only one patient
// a patient can make many requests and a request correspond to one patient 
// a doctor can acept many requests and request can only be acceptes by one doctor 
// a report can belong to one one request and a  request can have only one report 
// a doctor can belong to many reports but a report can belong to only one doctor
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id              Int           @id @unique @default(autoincrement())
  FullName        String
  date_of_birth   DateTime
  email           String        @unique
  password        String
  phone_number    String
  gender          String
  profile_picture String
  location        String
  verified        Boolean
  status          Boolean
  role            String
  speciality      String
  patients        Patient[]     @relation("DoctorToPatient")
  doctorRequests  Request[]     @relation("DoctorRequests")
  MedicalExp      MedicalExp?
  appointments    Appointment[] @relation("DoctorAppointments")
  messages        Message[]     @relation("MessagesFromDoctor")
}

model MedicalExp {
  id         Int     @id @unique @default(autoincrement())
  id_card    String
  bio        String
  doctor     Doctor? @relation(fields: [doctor_id], references: [id])
  doctor_id  Int?    @unique
  medical_id String
}

model Request {
  id        Int      @id @unique @default(autoincrement())
  message   String
  status    String
  createdAt DateTime @default(now())
  report    Report?  @relation("RequestToReport")
  report_id Int?
  Doctor    Doctor?  @relation("DoctorRequests", fields: [doctorId], references: [id])
  doctorId  Int?
  Patient   Patient? @relation(fields: [patientId], references: [id])
  patientId Int?
}

model Report {
  id                       Int      @id @unique @default(autoincrement())
  Familial_Medical_History String[]
  Allergies                String[]
  PastIllness              String[]
  Surgeries                String[]
  Medications              String[]
  Chronic_Illness          String[]
  Imaging_test_results     String[]
  request                  Request  @relation(name: "RequestToReport", fields: [request_id], references: [id])
  request_id               Int      @unique
}

model Patient {
  id                Int          @id @unique @default(autoincrement())
  FullName          String
  date_of_birth     DateTime
  email             String       @unique
  password          String
  phone_number      String
  Gender            String
  profile_picture   String
  location          String
  verification_code String
  role              String
  doctors           Doctor[]     @relation("DoctorToPatient")
  requests          Request[]
  medicalInfo       MedicalInfo?
  messages          Message[]    @relation("MessagesFromPatient")
}

model MedicalInfo {
  id                       Int      @id @unique @default(autoincrement())
  Familial_Medical_History String[]
  Allergies                String[]
  PastIllness              String[]
  Surgeries                String[]
  Medications              String[]
  Chronic_Illness          String[]
  Imaging_test_results     String[]
  patient                  Patient? @relation(fields: [patientId], references: [id])
  patientId                Int?     @unique
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fromPatientId Int?
  patient       Patient? @relation("MessagesFromPatient", fields: [fromPatientId], references: [id])
  fromDoctorId  Int?
  doctor        Doctor?  @relation("MessagesFromDoctor", fields: [fromDoctorId], references: [id])
  toPatientId   Int?
  toDoctorId    Int?
}

model Appointment {
  id          Int      @id @unique @default(autoincrement())
  dateTime    DateTime
  PatientName String
  description String
  createdAt   DateTime @default(now())
  doctor      Doctor   @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId    Int
  
  @@unique([dateTime, doctorId])
}
